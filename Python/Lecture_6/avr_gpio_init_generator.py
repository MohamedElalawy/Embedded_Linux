
def generate_avr_gpio_init(port_config):
    code = []
    code.append('void GPIO_init(void) {')

    for port, pins in port_config.items():
        ddr = f'DDR{port[-1]}'
        port_reg = port

        ddr_bits = [0] * 8
        port_bits = [0] * 8

        for pin, config in pins.items():
            if config['dir'] == 'OUTPUT':
                ddr_bits[pin] = 1
            elif config['dir'] == 'INPUT':
                ddr_bits[pin] = 0
                if config.get('pullup', False):
                    port_bits[pin] = 1

        ddr_value = sum([bit << pin for pin, bit in enumerate(ddr_bits)])
        port_value = sum([bit << pin for pin, bit in enumerate(port_bits)])

        code.append(f'    {ddr} = 0x{ddr_value:02X};')
        if any(port_bits):
            code.append(f'    {port_reg} = 0x{port_value:02X};')

    code.append('}')
    return '\n'.join(code)


def get_user_config():
    port_config = {}

    while True:
        port = input("Enter port name (e.g., PORTB), or press Enter to finish: ").strip().upper()
        if not port:
            break

        port_config[port] = {}
        while True:
            pin_input = input(f"  Enter pin number for {port} (0-7), or press Enter to finish {port}: ").strip()
            if not pin_input:
                break
            try:
                pin = int(pin_input)
                if pin < 0 or pin > 7:
                    print("    Invalid pin. Must be 0-7.")
                    continue
            except ValueError:
                print("    Please enter a valid number.")
                continue

            dir_input = input("    Direction (INPUT/OUTPUT): ").strip().upper()
            if dir_input not in ['INPUT', 'OUTPUT']:
                print("    Invalid direction. Must be INPUT or OUTPUT.")
                continue

            pin_config = {'dir': dir_input}
            if dir_input == 'INPUT':
                pullup_input = input("    Enable pull-up resistor? (y/n): ").strip().lower()
                pin_config['pullup'] = pullup_input == 'y'

            port_config[port][pin] = pin_config

    return port_config


if __name__ == "__main__":
    print("=== AVR GPIO Init Function Generator ===")
    config = get_user_config()
    generated_code = generate_avr_gpio_init(config)
    print("\nGenerated GPIO_init() function:\n")
    print(generated_code)

    # Write to file
    with open('generatedFunction.c', 'w') as f:
        f.write('// This file was generated by interactive_avr_gpio_init_generator.py\n')
        f.write('#include <avr/io.h>\n\n')
        f.write(generated_code + '\n')

    print("\n The function has been saved to 'generatedFunction.c'.")
